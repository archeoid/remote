// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package api

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageBuffer struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageBuffer(buf []byte, offset flatbuffers.UOffsetT) *MessageBuffer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageBuffer{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MessageBuffer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageBuffer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageBuffer) Action() Action {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Action(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MessageBuffer) MutateAction(n Action) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *MessageBuffer) Subject() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageBuffer) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MessageBufferStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func MessageBufferAddAction(builder *flatbuffers.Builder, action Action) {
	builder.PrependByteSlot(0, byte(action), 0)
}
func MessageBufferAddSubject(builder *flatbuffers.Builder, subject flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(subject), 0)
}
func MessageBufferAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(content), 0)
}
func MessageBufferEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
